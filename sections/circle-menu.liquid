
    <style>
     * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

.main-cm-32-d9 {
    width: 100%;
    margin: 0 auto;
}

.inner-cm-32-d9 {
    max-width: 1440px;
    margin: 0 auto;
    width: 95%;
    padding-top: {{ section.settings.p-top }}rem;
    padding-bottom: {{ section.settings.p-bottom }}rem;
    position: relative;
}

.row-cm-32-d9 {
    display: flex;
    gap: 30px;
    justify-content: center;
    overflow: hidden;
}

.slider-wrapper {
    display: flex;
    gap: 30px;
    justify-content: flex-start;
    scroll-snap-type: x mandatory;
    overflow-x: scroll;
    -webkit-overflow-scrolling: touch;
}
::-webkit-scrollbar{
    display: none;
}
.img-cm-32-d9 {
    width: {{ section.settings.img-size }}rem;
    height: {{ section.settings.img-size }}rem;
    border-radius: 50%;
    overflow: hidden;
}

.img-cm-32-d9 img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: block;
}

.row-cm-32-d9 a {
    text-decoration: none;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
}

.title-cm-32-d9 h4 {
    text-align: center !important;
    color: {{ section.settings.t-color }};
    font-size: {{ section.settings.t-size }}px !important;
    font-weight: 500;
}

.inner-cm-32-d9 .title-d9 {
    font-size: {{ section.settings.h-font }}px !important;
    color: {{ section.settings.h-color }};
    font-weight: {% if section.settings.h-weight == 'light' %}light {% else %} bold {% endif %};
    text-align: center;
}

.slide {
    min-width: 250px; 
    flex-shrink: 0;
}

/* Slider Navigation */
.slider-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    cursor: pointer;
    z-index: 10;
    display: none; 
}
.slider-nav svg{
    width: 100%;
    height: 100%;
}
.left-arrow {
    left: 10px;
}

.right-arrow {
    right: 10px;
}

    </style>




    <div class="main-cm-32-d9 slider-container">
        <div class="inner-cm-32-d9">

            <h2 class="title-d9">{{ section.settings.title }}</h2>

            <div class="row-cm-32-d9 slider-wrapper">
                {% for block in section.blocks %}
                    {% if block.type == 'menu' %}    
                    <div class="col-cm-32-d9 slide">
                        <a href="{{ block.settings.c-link }}">
                            <div class="img-cm-32-d9">
                                <img src="{{ block.settings.c-img |  image_url: width: 300, height: 300 }}" alt="">
                            </div>
                            <div class="title-cm-32-d9">
                                <h4>{{ block.settings.text-1 }}</h4>
                            </div>
                        </a>
                    </div>
                    {% endif %}
                    {% if block.type == 'product' %}
                    {% assign product = block.settings.product %}
                    <div class="col-cm-32-d9 slide">
                        <a href="{{ product.url }}">
                            <div class="img-cm-32-d9">
                                <img src="{{ product.featured_image |  image_url: width: 300, height: 300 }}" alt="">
                            </div>
                            <div class="title-cm-32-d9">
                                <h4>{{ product.title | escape | truncate: 20 }}</h4>
                            </div>
                        </a>
                    </div>
                    {% endif %}
                {% endfor %}
            </div>
            
          
            <button class="slider-nav left-arrow">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/>
</svg>


            </button>
            <button class="slider-nav right-arrow">

            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M8.59 16.59L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.59Z" fill="currentColor"/>
</svg>

            </button>
        </div>
    </div>


                    <script>
  document.addEventListener("DOMContentLoaded", function () {
    const sliderWrapper = document.querySelector(".slider-wrapper");
    const leftArrow = document.querySelector(".left-arrow");
    const rightArrow = document.querySelector(".right-arrow");

    let scrollPosition = 0;
    const slideWidth = sliderWrapper.querySelector(".slide").offsetWidth + 30; // 30 is the gap

    // Function to update arrow visibility
    function updateArrows() {
        const maxScrollLeft = sliderWrapper.scrollWidth - sliderWrapper.clientWidth;

        // Update arrow visibility based on scroll position
        leftArrow.style.display = scrollPosition > 0 ? 'block' : 'none';
        rightArrow.style.display = scrollPosition < maxScrollLeft ? 'block' : 'none';

        // Hide arrows if there's no need for scrolling
        if (sliderWrapper.scrollWidth <= sliderWrapper.clientWidth) {
            leftArrow.style.display = 'none';
            rightArrow.style.display = 'none';
        }
    }

    // Scroll to the next slide
    function scrollToNextSlide() {
        const maxScrollLeft = sliderWrapper.scrollWidth - sliderWrapper.clientWidth;
        if (scrollPosition < maxScrollLeft) {
            scrollPosition += slideWidth;
            if (scrollPosition > maxScrollLeft) scrollPosition = maxScrollLeft;
            sliderWrapper.scrollTo({ left: scrollPosition, behavior: "smooth" });
        }
        updateArrows(); // Update arrows immediately after scrolling
    }

    // Scroll to the previous slide
    function scrollToPreviousSlide() {
        if (scrollPosition > 0) {
            scrollPosition -= slideWidth;
            if (scrollPosition < 0) scrollPosition = 0;
            sliderWrapper.scrollTo({ left: scrollPosition, behavior: "smooth" });
        }
        updateArrows(); // Update arrows immediately after scrolling
    }

    // Event listeners for arrows
    leftArrow.addEventListener("click", scrollToPreviousSlide);
    rightArrow.addEventListener("click", scrollToNextSlide);

    // Touch event handling for swipe
    let startX;

    sliderWrapper.addEventListener("touchstart", (e) => {
        startX = e.touches[0].clientX;
    });

    sliderWrapper.addEventListener("touchmove", (e) => {
        if (!startX) return;
        const diffX = startX - e.touches[0].clientX;
        if (diffX > 50) {
            scrollToNextSlide();
            startX = null;
        } else if (diffX < -50) {
            scrollToPreviousSlide();
            startX = null;
        }
    });

    // Drag event handling for desktop
    let isDragging = false;
    let startDragX;

    sliderWrapper.addEventListener("mousedown", (e) => {
        isDragging = true;
        startDragX = e.clientX;
        sliderWrapper.classList.add('dragging');
    });

    sliderWrapper.addEventListener("mousemove", (e) => {
        if (!isDragging) return;
        const diffX = startDragX - e.clientX;
        sliderWrapper.scrollLeft = scrollPosition + diffX;
    });

    sliderWrapper.addEventListener("mouseup", () => {
        isDragging = false;
        sliderWrapper.classList.remove('dragging');
        scrollPosition = sliderWrapper.scrollLeft;
        updateArrows();
    });

    sliderWrapper.addEventListener("mouseleave", () => {
        if (!isDragging) return;
        isDragging = false;
        sliderWrapper.classList.remove('dragging');
        scrollPosition = sliderWrapper.scrollLeft;
        updateArrows();
    });

    // Update arrows on window resize
    window.addEventListener("resize", updateArrows);

    // Update scroll position on scroll
    sliderWrapper.addEventListener("scroll", () => {
        scrollPosition = sliderWrapper.scrollLeft;
        updateArrows();
    });

    // Initial arrow update
    updateArrows();
});


                    </script>


{% schema %}
{
    "name": "Circle Menu",
    "settings": [
        {
            "type": "header",
            "content": "Dektop Configurations"
        },
        {
            "type": "text",
            "id": "title",
            "label": "Heading",
            "default": "Circle Menus"
        },
        {
            "type": "range",
            "id": "h-font",
            "label": "Heading Size",
            "max": 70,
            "min": 10,
            "default": 34,
            "step": 1,
            "unit": "px"
        },
        {
            "type": "color",
            "id": "h-color",
            "label": "Heading Color",
            "default": "#000"
        },
        {
            "type": "select",
            "id": "h-weight",
            "label": "Heading Font Weight",
            "default": "bold",
            "options": [
                {
                    "value": "light",
                    "label": "Light"
                },
                {
                    "value": "bold",
                    "label": "Bold"
                }
            ]
        },
        {
            "type": "range",
            "id": "p-top",
            "label": "Padding Top",
            "max": 30,
            "min": 0,
            "default": 3,
            "step": 1,
            "unit": "px"
        }, 
          {
            "type": "range",
            "id": "p-bottom",
            "label": "Padding Bottom",
            "max": 30,
            "min": 0,
            "default": 3,
            "step": 1,
            "unit": "rem"
        },
        {
            "type": "header",
            "content": "Menu Configurations"
        },
        {
            "type": "range",
            "id": "img-size",
            "label": "Image Size",
            "max": 60,
            "min": 3,
            "default": 15,
            "step": 1,
            "unit": "rem"
        },
        {
            "type": "range",
            "id": "t-size",
            "label": "Title Size",
            "max": 30,
            "min": 10,
            "default": 20,
            "step": 1,
            "unit": "px"
        },
        {
            "type": "color",
            "id": "t-color",
            "label": "Title Color",
            "default": "#000"
        }
        ],
        "blocks": [
            {
                "name": "Menu",
                "type": "menu",
                "settings": [
                    {
                        "type": "image_picker",
                        "id": "c-img",
                        "label": "Image"
                    },
                    {
                        "type": "text",
                        "id": "text-1",
                        "label": "Menu Title",
                        "default": "Link"
                    },
                    {
                        "type": "url",
                        "id": "c-link",
                        "label": "Menu Link"
                    }
                ]
            },
            {
                "name": "Product",
                "type": "product",
                "settings": [
                    {
                        "type": "product",
                        "id": "product",
                        "label": "Product"
                    }
                ]
            }
        ],
        "presets": [
            {
                "name": "Circle Menu"
            }
        ]
}
{% endschema %}