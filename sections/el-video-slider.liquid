{% comment %} Seamless Infinite Looping Video Slider {% endcomment %}

<style>
  .el-slider-container {
    max-width: 1360px;
    margin: 2rem auto;
    padding: 0 40px;
    width: 100%;
    box-sizing: border-box;
  }
  
  .el-slider-title {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 0.5rem;
    color: #181818;
    text-align: center;
  }
  
  .el-slider-subtitle {
    font-size: 1.2rem;
    color: #333;
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .el-slider-viewport {
    position: relative;
    overflow: hidden;
    width: 100%;
    margin: 0 auto;
  }
  
  .el-slider-track {
    display: flex;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }
  
  .el-slider-slide {
    flex: 0 0 calc(33.333% - 32px);
    margin: 0 16px;
    background: #f4f1ef;
    border-radius: 1.5rem;
    overflow: hidden;
    position: relative;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.07);
    min-height: 420px;
  }
  
  .el-slider-slide.active {
    transform: scale(1.08);
    box-shadow: 0 6px 32px rgba(0, 0, 0, 0.13);
    z-index: 2;
  }
  
  .el-slide-media {
    position: relative;
    width: 100%;
    height: 340px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .el-slide-media video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 1.5rem 1.5rem 0 0;
    background: #000;
  }
  
  .el-slide-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(180deg, rgba(0, 0, 0, 0.18) 0%, rgba(0, 0, 0, 0.38) 100%);
    z-index: 1;
  }
  
  .el-slide-content {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    color: #fff;
    padding: 1.2rem 1.2rem 1.7rem 1.2rem;
    background: linear-gradient(0deg, rgba(0, 0, 0, 0.55) 60%, rgba(0, 0, 0, 0) 100%);
  }
  
  .el-mute-btn {
    position: absolute;
    bottom: 1.2rem;
    right: 1.2rem;
    z-index: 3;
    background: rgba(0, 0, 0, 0.55);
    border: none;
    border-radius: 50%;
    width: 38px;
    height: 38px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    font-size: 1.3rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  
  .el-mute-btn:active {
    background: rgba(0, 0, 0, 0.85);
  }
  
  .el-slider-nav {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1.2rem;
    margin-top: 1.5rem;
  }
  
  .el-slider-arrow {
    background: #e5e0e7;
    border: none;
    border-radius: 50%;
    width: 38px;
    height: 38px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #bc9bb2;
    font-size: 1.5rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  
  .el-slider-arrow:active {
    background: #bc9bb2;
    color: #fff;
  }
  
  @media (max-width: 900px) {
    .el-slider-container {
      padding: 0 8px;
    }
    
    .el-slider-title,
    .el-slider-subtitle {
      text-align: left;
      padding: 0 8px;
    }
    
    .el-slider-slide {
      flex: 0 0 calc(100% - 12px);
      min-height: 320px;
      margin: 0 6px;
    }
    
    .el-slide-media {
      height: 220px;
    }
  }
</style>

<div class="el-slider-container">
  <div class="el-slider-title">{{ section.settings.title }}</div>
  <div class="el-slider-subtitle">{{ section.settings.subtitle }}</div>
  
  <div class="el-slider-viewport">
    <div class="el-slider-track" id="el-slider-track">
      {% for block in section.blocks %}
        <div class="el-slider-slide" data-index="{{ forloop.index0 }}" data-id="{{ block.id }}">
          <div class="el-slide-media">
            {% if block.settings.video_url != blank %}
              <video src="{{ block.settings.video_url }}" preload="metadata" playsinline muted loop></video>
            {% elsif block.settings.image != blank %}
              <img src="{{ block.settings.image | img_url: '600x' }}" alt="{{ block.settings.image_alt | default: block.settings.title }}" loading="lazy">
            {% else %}
              <div style="background:#e5e0e7;display:flex;align-items:center;justify-content:center;color:#bc9bb2;font-size:2rem;width:100%;height:100%;">
                {{ 'image' | placeholder_svg_tag }}
              </div>
            {% endif %}
            <div class="el-slide-overlay"></div>
            <button class="el-mute-btn" aria-label="Toggle mute" style="display: none;">
              <span class="mute-icon">ðŸ”‡</span>
              <span class="unmute-icon" style="display:none">ðŸ”Š</span>
            </button>
          </div>
          <div class="el-slide-content">
            <h3 class="el-slide-title">{{ block.settings.title }}</h3>
            <p class="el-slide-desc">{{ block.settings.desc }}</p>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
  
  <div class="el-slider-nav">
    <button class="el-slider-arrow" id="el-slider-prev" aria-label="Previous slide">&#8592;</button>
    <button class="el-slider-arrow" id="el-slider-next" aria-label="Next slide">&#8594;</button>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const track = document.getElementById('el-slider-track');
  const prevBtn = document.getElementById('el-slider-prev');
  const nextBtn = document.getElementById('el-slider-next');
  
  if (!track || !track.children.length) return;
  
  let slides = Array.from(track.children);
  const originalSlides = [...slides];
  let currentIndex = 0;
  let isAnimating = false;
  let slideWidth = slides[0].offsetWidth + 32;
  let trackWidth = slideWidth * slides.length;
  
  // Initialize the slider
  function initSlider() {
    // Center the first slide
    currentIndex = 0;
    updateTrackWidth();
    centerActiveSlide(true);
    
    // Set first slide as active
    updateActiveSlide();
    
    // Add event listeners for mute buttons
    setupMuteButtons();
  }
  
  // Update track width when slides change
  function updateTrackWidth() {
    slideWidth = slides[0].offsetWidth + 32;
    trackWidth = slideWidth * slides.length;
    track.style.width = `${trackWidth}px`;
  }
  
  // Center the active slide in viewport
  function centerActiveSlide(instant = false) {
    const viewportWidth = track.parentElement.offsetWidth;
    const targetPosition = (viewportWidth / 2) - (slideWidth / 2) - (currentIndex * slideWidth);
    
    track.style.transition = instant ? 'none' : 'transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
    track.style.transform = `translateX(${targetPosition}px)`;
  }
  
  // Update active slide state
  function updateActiveSlide() {
    slides.forEach((slide, index) => {
      const isActive = index === currentIndex;
      slide.classList.toggle('active', isActive);
      
      const video = slide.querySelector('video');
      const muteBtn = slide.querySelector('.el-mute-btn');
      
      if (isActive && video) {
        video.play().catch(e => console.log('Autoplay prevented:', e));
        if (muteBtn) muteBtn.style.display = 'flex';
      } else if (video) {
        video.pause();
        if (muteBtn) muteBtn.style.display = 'none';
      }
    });
  }
  
  // Setup mute buttons for all slides
  function setupMuteButtons() {
    slides.forEach(slide => {
      const video = slide.querySelector('video');
      const muteBtn = slide.querySelector('.el-mute-btn');
      
      if (video && muteBtn) {
        muteBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          video.muted = !video.muted;
          muteBtn.querySelector('.mute-icon').style.display = video.muted ? '' : 'none';
          muteBtn.querySelector('.unmute-icon').style.display = video.muted ? 'none' : '';
        });
        
        // Set initial state
        muteBtn.querySelector('.mute-icon').style.display = video.muted ? '' : 'none';
        muteBtn.querySelector('.unmute-icon').style.display = video.muted ? 'none' : '';
      }
    });
  }
  
  // Handle navigation to next slide
  function goToNextSlide() {
    if (isAnimating) return;
    isAnimating = true;
    
    // Duplicate first slide and append to end
    const firstSlide = slides[0];
    const clone = firstSlide.cloneNode(true);
    clone.removeAttribute('data-index');
    clone.setAttribute('data-cloned', 'true');
    track.appendChild(clone);
    
    // Update slides array
    slides = Array.from(track.children);
    updateTrackWidth();
    
    // Move to next slide
    currentIndex++;
    centerActiveSlide();
    
    // After animation completes
    setTimeout(() => {
      // Remove the old first slide
      track.removeChild(slides[0]);
      
      // Update slides array and reset index
      slides = Array.from(track.children);
      currentIndex--;
      
      // Update active slide
      updateActiveSlide();
      isAnimating = false;
    }, 500);
  }
  
  // Handle navigation to previous slide
  function goToPrevSlide() {
    if (isAnimating) return;
    isAnimating = true;
    
    // Duplicate first slide and append to end (for seamless transition)
    const firstSlide = slides[0];
    const clone = firstSlide.cloneNode(true);
    clone.removeAttribute('data-index');
    clone.setAttribute('data-cloned', 'true');
    track.appendChild(clone);
    slides = Array.from(track.children);
    updateTrackWidth();
    
    // Move to previous slide (which is technically the last slide)
    currentIndex = slides.length - 2;
    centerActiveSlide();
    
    // After animation completes
    setTimeout(() => {
      // Remove the newly added clone
      track.removeChild(slides[slides.length - 1]);
      
      // Update slides array and reset index
      slides = Array.from(track.children);
      currentIndex = 0;
      
      // Update active slide
      updateActiveSlide();
      isAnimating = false;
    }, 500);
  }
  
  // Event listeners
  prevBtn.addEventListener('click', goToPrevSlide);
  nextBtn.addEventListener('click', goToNextSlide);
  
  // Handle window resize
  window.addEventListener('resize', function() {
    slides = Array.from(track.children);
    updateTrackWidth();
    centerActiveSlide(true);
  });
  
  // Initialize the slider
  initSlider();
});
</script>

{% schema %}
{
  "name": "Seamless Looping Slider",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Featured Videos"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Watch them in action"
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "url",
          "id": "video_url",
          "label": "Video URL"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Fallback Image"
        },
        {
          "type": "text",
          "id": "image_alt",
          "label": "Image Alt Text"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Slide Title"
        },
        {
          "type": "textarea",
          "id": "desc",
          "label": "Description",
          "default": "Slide description text goes here."
        }
      ]
    }
  ],
  "max_blocks": 10,
  "presets": [
    {
      "name": "Seamless Looping Slider",
      "blocks": [
        {
          "type": "slide"
        },
        {
          "type": "slide"
        },
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}