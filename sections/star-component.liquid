<style>

#shopify-section-{{ section.id }} i,.rating-container i:before {
    width: 64px;
    height: 64px;
    background-repeat: no-repeat !important;
    background-position: 0 0;
    background-size: 64px 64px;
    background-image: url(https://cdn.shopify.com/s/files/1/0562/7763/1105/files/svg-star.svg?v=1732888283);
    display: inline-block;
  }
  #shopify-section-{{ section.id }} i{
    position: relative;
  }
.rating-container i:before {
    content: none;
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: var(--partial-width, 0%);
}
.rating-container i.partial:before {
    content: "";
    display: block;
}

  
</style>


<div class="text-container">
  <div class="rating-container" ss-data-rating="5"></div>
  <div class="rating-container" ss-data-rating="3.4"></div>
  <div class="rating-container" ss-data-rating="0"></div>

<script>
    class StarRating {
        constructor(containerSelector) {
            this.containers = document.querySelectorAll(containerSelector);
            this.fullStar = `<i class="star" style="background: url(https://cdn.shopify.com/s/files/1/0562/7763/1105/files/svg-star.svg?v=1732888283)"></i>`;
            this.emptyStar = `<i class="star" style="background: url(https://cdn.shopify.com/s/files/1/0562/7763/1105/files/svg-0.svg?v=1732889585)"></i>`;
        }

        renderStars() {
            // Iterate over each container and render the stars based on the rating attribute
            this.containers.forEach(container => {
                const rating = parseFloat(container.getAttribute('ss-data-rating'));

                // Ensure rating is between 0 and 5
                if (rating < 0 || rating > 5 || isNaN(rating)) {
                    console.error('Invalid rating value. Please provide a number between 0 and 5.');
                    return;
                }

                let starsHTML = ''; // Create an empty string to accumulate stars

                // Calculate number of full stars
                const fullStarsCount = Math.floor(rating);

                // Calculate the decimal part of the rating
                const decimalPart = rating % 1;

                // Determine the width of the partial star (percentage based on decimalPart)
                let partialStar = '';
                let emptyPartialStar = ''; // To represent the empty portion of the partial star
                if (decimalPart > 0) {
                    const partialWidth = Math.round(decimalPart * 100);

                    // Add a partial star with a style to set the width of the 'before' pseudo-element
                    partialStar = `<i class="star partial" style="--partial-width: ${partialWidth}%;"></i>`;

                    // Add an empty star for the remaining width of the partial star
                    emptyPartialStar = `<i class="star partial empty" style="--partial-width: ${100 - partialWidth}%;"></i>`;
                }

                // Calculate the number of empty stars
                const emptyStarsCount = 5 - fullStarsCount - (partialStar ? 1 : 0);

                // Add full stars
                starsHTML += this.fullStar.repeat(fullStarsCount);

                // Add partial star if necessary
                if (partialStar) {
                    starsHTML += partialStar;
                    // Add empty partial star to fill up the remaining part of the star
                    starsHTML += emptyPartialStar;
                }

                // Add empty stars
                starsHTML += this.emptyStar.repeat(emptyStarsCount);

                // Set the container's innerHTML with the accumulated stars
                container.innerHTML = starsHTML;
            });
        }
    }

    // Instantiate the StarRating class and render the stars for all containers
    const starRating = new StarRating('.rating-container');
    starRating.renderStars();
</script>



  <div class="rating-stars" data-stars="4.5">
    <i class="star"></i>
    <i class="star"></i>
    <i class="star"></i>
    <i class="star"></i>
    <i class="star"></i>
  </div>
</div>
{% schema %}
{
  "name": "Star component",
  "settings": [],
  "presets": [
    {
      "name": "Star component"
    }
  ]
}
{% endschema %}
